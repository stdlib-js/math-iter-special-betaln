{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar iterMap2 = require( '@stdlib/math-iter-tools-map2' );\nvar betaln = require( '@stdlib/math-base-special-betaln' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively evaluates the natural logarithm of the beta function.\n*\n* ## Notes\n*\n* -   If provided a numeric value as an iterator argument, the value is broadcast as an **infinite** iterator which **always** returns the provided value.\n* -   If an iterated value is non-numeric (including `NaN`), the returned iterator returns `NaN`. If non-numeric iterated values are possible, you are advised to provide an iterator which type checks and handles non-numeric values accordingly.\n* -   The length of the returned iterator is equal to the length of the shortest provided iterator. In other words, the returned iterator ends once **one** of the provided iterators ends.\n* -   If an environment supports `Symbol.iterator` and all provided iterators are iterable, the returned iterator is iterable.\n*\n* @param {(Iterator|number)} x - input iterator\n* @param {(Iterator|number)} y - input iterator\n* @throws {TypeError} first argument must be either an iterator protocol-compliant object or a number\n* @throws {TypeError} second argument must be either an iterator protocol-compliant object or a number\n* @returns {Iterator} iterator\n*\n* @example\n* var uniform = require( '@stdlib/random-iter-uniform' );\n*\n* var x = uniform( 0.0, 2.0 );\n* var y = uniform( 0.0, 2.0 );\n*\n* var iter = iterBetaln( x, y );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterBetaln( x, y ) {\n\treturn iterMap2( x, y, betaln );\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterBetaln;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively evaluates the natural logarithm of the beta function.\n*\n* @module @stdlib/math-iter-special-betaln\n*\n* @example\n* var uniform = require( '@stdlib/random-iter-uniform' );\n* var iterBetaln = require( '@stdlib/math-iter-special-betaln' );\n*\n* var x = uniform( 0.0, 2.0 );\n* var y = uniform( 0.0, 2.0 );\n*\n* var iter = iterBetaln( x, y );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAW,QAAS,8BAA+B,EACnDC,EAAS,QAAS,kCAAmC,EAwCzD,SAASC,EAAYC,EAAGC,EAAI,CAC3B,OAAOJ,EAAUG,EAAGC,EAAGH,CAAO,CAC/B,CAKAF,EAAO,QAAUG,ICtBjB,IAAIG,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "iterMap2", "betaln", "iterBetaln", "x", "y", "main"]
}
